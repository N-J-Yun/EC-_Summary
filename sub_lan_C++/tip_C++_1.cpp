// ---------------------------------------------헤더 파일----------------------------------------------------
#pragma once
class GamePlayer 
{
private:
	static const int NumTurns = 5;		// 정의가 아닌 선언이 되었다.
										// 선언과 함께 초기화 값을 주었다 -> 이 상수가 선언될 당시에 바로 초기화된다.
										// 정의를 따로 해주지 않아도 사용할 수 있다!
										// 헤더파일에 선언

	//enum { NumTurns = 5 };			// 위 선언 대신 이러한 방식을 사용할 수도 있다.(enum hack)
										// #define의 동작방식에 더 가깝다.(NumTurns의 주소를 얻어낼 수 없다.)
										// 하지만 #define처럼 어떤 형태의 쓸데없는 메모리 할당도 저지르지 않는다!
										// -> 설계상의 제약을 걸어 줄 수 있다.(참조자, 포인터 사용 불가능하도록)
										// 템플릿 메타 프로그래밍의 핵심 기법!

	int scores[NumTurns];				// 클래스 내에서 상수를 사용하는 부분.

};
//----------------------------------------------------------------------------------------------------------
// ---------------------------------------------구현 파일----------------------------------------------------

#include<iostream>
//#include"Test.h"

const int GamePlayer::NumTurns; 	// 클래스 상수를 정의하였다. (이 상수의 주소를 취하기 위해서는 정의를 반드시 해주어야 한다.)
									// Test.h 헤더파일 내의 GamePlayer 클래스 내에서 선언과 동시에 초기값을 주었기 때문에
									// 정의하는 부분에는 초기값을 주어서는 안된다.
									// 구현 파일에서 정의해 주어야 한다.

int main()
{
			
	return 0;
}